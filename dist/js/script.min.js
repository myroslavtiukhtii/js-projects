window.addEventListener("DOMContentLoaded",function(){var t,e=document.querySelector(".stop-watch__counter__seconds"),n=document.querySelector(".stop-watch__counter__minutes"),c=(null==(d=document.querySelector(".stop-watch__start"))||d.addEventListener("click",function(){0<r||(u(),t=setInterval(l,1e3))}),document.querySelector(".stop-watch__stop")),o=(c.addEventListener("click",function(){0<r&&(u(),c.classList.toggle("active"),c.classList.contains("active")?(c.textContent="Paused",clearInterval(t)):(c.textContent="Stop",t=setInterval(l,1e3)))}),null==(d=document.querySelector(".stop-watch__reset"))||d.addEventListener("click",function(){n.innerHTML="00",e.innerHTML="00",i=r=0,c.classList.remove("active")}),document.querySelector(".stop-watch__counter__dots")),r=0,i=0;function u(){null!=o&&o.classList.toggle("active")}function l(){59<++r?(r=0,e.innerHTML="0"+String(r.toFixed(0)),i++,n.innerHTML=10<=i?String(i):"0"+String(i)):e.innerHTML=10<=r?String(r.toFixed(0)):"0"+String(r.toFixed(0))}var a,s=document.querySelector(".calculator__screen"),d=document.querySelector(".calculator__increment"),_=document.querySelector(".calculator__decrement"),m=document.querySelector(".calculator__multiplication"),v=document.querySelector(".calculator__division"),L=(document.querySelector(".calculator__numbers__dot"),document.querySelector(".calculator__numbers__clear"),document.querySelector(".calculator__equal")),S=[],g=0,y="";document.addEventListener("click",function(t){if(t.target.hasAttribute("data-symbol")){t=t.target.getAttribute("data-symbol");if(t&&S.length<9){S.push(Number(t));for(var e=0;e<S.length;e++)s.textContent=S.join("")}}}),d.addEventListener("click",function(){y="plus",g=Number(S.join("")),S=[]}),_.addEventListener("click",function(){y="minus",g=Number(S.join("")),S=[]}),m.addEventListener("click",function(){y="multi",g=Number(S.join("")),S=[]}),v.addEventListener("click",function(){y="divide",g=Number(S.join("")),S=[]}),L.addEventListener("click",function(){switch(a=Number(S.join("")),y){case"plus":S=[],s.textContent="".concat(g+a),console.log("".concat(g+a)),console.log(s.textContent);case"minus":s.textContent="".concat(g-a);case"multi":s.textContent="".concat(g*a);case"divide":s.textContent="".concat(g/a)}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
