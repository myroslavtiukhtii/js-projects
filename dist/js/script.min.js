window.addEventListener("DOMContentLoaded",function(){var _a,_b,COUNTERSEC=document.querySelector(".stop-watch__counter__seconds"),COUNTERMIN=document.querySelector(".stop-watch__counter__minutes"),STARTBTN=null==(_a=document.querySelector(".stop-watch__start"))?void 0:_a.addEventListener("click",startCounting),STOPBTN=document.querySelector(".stop-watch__stop"),RESETBTN=(STOPBTN.addEventListener("click",stopWatch),null==(_b=document.querySelector(".stop-watch__reset"))?void 0:_b.addEventListener("click",resetWatch)),DOTS=document.querySelector(".stop-watch__counter__dots"),counter=0,counterMin=0,watchInterval;function startCounting(){0<counter||(startDots(),watchInterval=setInterval(countingInterval,1e3))}function startDots(){null!=DOTS&&DOTS.classList.toggle("active")}function countingInterval(){59<++counter?(counter=0,COUNTERSEC.innerHTML="0"+String(counter.toFixed(0)),counterMin++,COUNTERMIN.innerHTML=10<=counterMin?String(counterMin):"0"+String(counterMin)):COUNTERSEC.innerHTML=10<=counter?String(counter.toFixed(0)):"0"+String(counter.toFixed(0))}function resetWatch(){COUNTERMIN.innerHTML="00",COUNTERSEC.innerHTML="00",counterMin=counter=0,STOPBTN.classList.remove("active")}function stopWatch(){0<counter&&(startDots(),STOPBTN.classList.toggle("active"),STOPBTN.classList.contains("active")?(STOPBTN.textContent="Paused",clearInterval(watchInterval)):(STOPBTN.textContent="Stop",watchInterval=setInterval(countingInterval,1e3)))}var SCREEN=document.querySelector(".calculator__screen--main"),SCREENOPERAT=document.querySelector(".calculator__screen--operations"),PLUSBTN=document.querySelector(".calculator__increment"),MINUSBTN=document.querySelector(".calculator__decrement"),MULTIBTN=document.querySelector(".calculator__multiplication"),DIVBTN=document.querySelector(".calculator__division"),NUMDOT=document.querySelector(".calculator__numbers__dot"),NUMCLEAR=document.querySelector(".calculator__numbers__clear"),EQUALBTN=document.querySelector(".calculator__equal"),numbers=[],screenNumber=0,symbol="",sumNumbers=[];function takeDataTag(e){if(e.target.hasAttribute("data-symbol")){e=e.target.getAttribute("data-symbol");if(e&&numbers.length<9){numbers.push(Number(e));for(var t=0;t<numbers.length;t++)SCREEN.textContent=numbers.join("")}}}function addNumber(){screenNumber=Number(numbers.join("")),numbers=[],addOperator()}function addOperator(){sumNumbers.push(screenNumber),sumNumbers.push(symbol),screenOperat()}function screenOperat(){SCREENOPERAT.innerHTML=sumNumbers.join(" ")}function makeOperation(){function calculationSum(){var sum=0,sum=eval(sumNumbers.join(""));sumNumbers=(Number.isInteger(sum)?SCREEN.textContent=String(sum):SCREEN.textContent=String(sum.toFixed(5)),[]),sumNumbers.push(Number(sum))}numbers=[],sumNumbers.pop(),calculationSum()}document.addEventListener("click",takeDataTag),NUMCLEAR.addEventListener("click",function(){SCREEN.textContent="0",SCREENOPERAT.innerHTML="",numbers=[],sumNumbers=[]}),NUMDOT.addEventListener("click",function(){numbers.push(".")}),PLUSBTN.addEventListener("click",function(){symbol="+",addNumber()}),MINUSBTN.addEventListener("click",function(){symbol="-",addNumber()}),MULTIBTN.addEventListener("click",function(){symbol="*",addNumber()}),DIVBTN.addEventListener("click",function(){symbol="/",addNumber()}),EQUALBTN.addEventListener("click",function(){0<symbol.length&&(addNumber(),makeOperation())})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
